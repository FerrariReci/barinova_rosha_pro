from telegram.ext import Application, MessageHandler, filters,\
    CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import random
import sqlite3


async def start(update, context):
    con = sqlite3.connect('./bot_data.db')
    cur = con.cursor()
    context.user_data['game'] = cur.execute("""SELECT * FROM game""").fetchall()
    context.user_data['questions'] = []
    context.user_data['result'] = 0
    await update.message.reply_text('üëã„Ää-‚ù≤–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –º–æ—é –¥—Ä—É–≥!‚ù≥ -„Äãüëã \n'
                                    '–Ø –±–æ—Ç –ë–∞—Ä–∏–Ω–æ–≤–æ–π –†–æ—â–∏ –º–æ–≥—É:\n'
                                    '‚Ä¢ –°—ã–≥—Ä–∞—Ç—å —Å —Ç–æ–±–æ–π –≤ –∏–≥—Ä—É –∏ —É–∑–Ω–∞—Ç—å,'
                                    ' –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ç—ã –∑–Ω–∞–µ—à—å —Ç—Ä–∞—Å—Å—É –ë–∞—Ä–∏–Ω–æ–≤–æ–π –†–æ—â–∏\n'
                                    '‚Ä¢ –ú–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã\n'
                                    '‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π\n '
                                    '‚Ä¢ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ\n'
                                    '„Äî–ö–æ–º–∞–Ω–¥—ã:„Äï\n'
                                    '/game - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å–æ –º–Ω–æ–π üé≤\n'
                                    '/sports_training - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è? –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–≤–æ—é'
                                    ' —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ü§∏‚Äç‚ôÇÔ∏è\n'
                                    '/competition_dates - –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –≤ –ë–∞—Ä–∏–Ω–æ–≤–æ–π —Ä–æ—â–∏ üìÉ \n'
                                    '/result_sorev - –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π üèÜ ',
                                    reply_markup=ReplyKeyboardRemove())
    return 0


async def empty_function(update, context):
    await update.message.reply_text('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é...')


async def game(update, context):
    req = update.message.text.strip().lower()
    if req == '/game':
        context.user_data['right_answers'] = ['–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', '–í—ã—Å—à–∏–π –∫–ª–∞—Å—Å!', '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
                                              '–í—ã –º–∞—Å—Ç–µ—Ä!', '–ü–æ—Ç—Ä—è—Å–∞—é—â–µ!', '–ò–¥–µ–∞–ª—å–Ω–æ!', '–ë—Ä–∞–≤–æ!',
                                              '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!', '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!',
                                              '–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!',
                                              '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–æ–æ–±—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!',
                                              '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–µ –¥–µ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ!',
                                              '–£–º –∫–∞–∫ –±—Ä–∏—Ç–≤–∞!',
                                              '–ì–µ–Ω –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!', '–ú–∞—Å—Ç–µ—Ä –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫!',
                                              '–õ–µ–≥–µ–Ω–¥–∞ –¥–µ–¥—É–∫—Ü–∏–∏!']
        context.user_data['wrong_answers'] = ['–ù–∞–º –∂–∞–ª—å, –Ω–æ —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!',
                                              '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!',
                                              '–≠—Ö—Ö... –º–∏–º–æ, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!',
                                              '–ù–µ—Ç, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!',
                                              '–¢–∞–∫ –±–ª–∏–∑–∫–æ, –Ω–æ —Ç–∞–∫ –¥–∞–ª–µ–∫–æ, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!',
                                              '–ü–æ—á—Ç–∏ —Ç–∞–∫, –Ω–æ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ª—É—á—à–µ!',
                                              '–ü—Ä–æ–º–∞—Ö, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!',
                                              '–≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!',
                                              '–ù–∏–∫–æ–≥–æ —Ç–∏–ª—å—Ç–∞, —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–π —Ç–∏–ª—å—Ç!', '–ü–æ—á—Ç–∏ –±—ã–ª–æ!',
                                              '–°–ª–µ–¥–æ–≤–∞–ª–æ –ø–æ–¥—É–º–∞—Ç—å –µ—â—ë, —ç—Ç–æ –Ω–µ—Ä–ø–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!']
        await update.message.reply_text(f'–ü–†–ê–í–ò–õ–ê –ò–ì–†–´ ‚ùóÔ∏è\n'
                                        f'–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∞'
                                        f' —á–∞—Å—Ç—å —Ç—Ä–∞—Å—Å—ã –∏–ª–∏ –º–æ–º–µ–Ω—Ç –∏–∑ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ë–∞—Ä–∏–Ω–æ–≤—ã –†–æ—â–∏, '
                                        f'–í–∞–º –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ—Ç —É—á–∞—Å—Ç–æ–∫ —Ç—Ä–∞—Å—Å—ã'
                                        f' –∏–ª–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ, –Ω–∞ –≤—ã–±–æ—Ä –±—É–¥–µ—Ç 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞,'
                                        f' –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö.\n'
                                        f'–í –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã –±–æ—Ç –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —É–¥–∞—á–∏ üçÄ')
    if req == '/game' or req == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'.lower():
        chat_id = update.effective_message.chat_id
        past_questions = context.user_data['questions']
        now_question = random.choice(context.user_data['game'])
        while now_question in past_questions:
            now_question = random.choice(context.user_data['game'])
        context.user_data['questions'].append(now_question)
        context.user_data['now_question'] = now_question
        photo = now_question[-1]
        arr = [1, 2, 3, 4]
        random.shuffle(arr)
        reply_keyboard = [[now_question[arr[0]], now_question[arr[1]]],
                          [now_question[arr[2]], now_question[arr[3]]]]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
        await context.bot.sendPhoto(chat_id, photo=photo, reply_markup=markup)
        return 2
    elif req == '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç'.lower():
        await update.message.reply_text(f'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {context.user_data["result"]}üëç\n'
                                        f'–ù–µ–ø–ª–æ—Ö–∞—è –ø–æ–ø—ã—Ç–∫–∞!\n'
                                        f'–ù–æ —Ç—ã –Ω–µ –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç –¥–æ –∫–æ–Ω—Ü–∞,'
                                        f' –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ –∏ –ø–æ–ª—É—á–∏ –º–µ–¥–∞–ª—å üü¢',
                                        reply_markup=ReplyKeyboardRemove())
        context.user_data['questions'] = []
        context.user_data['result'] = 0
        return 0
    await update.message.reply_text(f'–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é(')


async def answer(update, context):
    req = update.message.text.strip().lower()
    right_answer = context.user_data['now_question'][4]
    reply_keyboard = [['–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    if req == right_answer.lower():
        answer = context.user_data['right_answers'].pop(random.randint(0,
                                                                       len(context.user_data['right'
                                                                                             '_answ'
                                                                                             'ers'])
                                                                       - 1))
        context.user_data['result'] += 1
        await update.message.reply_text(f'‚úÖ {answer} –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n'
                                        f'{context.user_data["now_question"][5]}',
                                        reply_markup=markup)
    else:
        answer = context.user_data['wrong_answers'].pop(random.randint(0,
                                                                       len(context.user_data['wrong'
                                                                                             '_answ'
                                                                                             'ers'])
                                                                       - 1))
        await update.message.reply_text(f'‚ùå {answer}\n'
                                        f'{context.user_data["now_question"][5]}',
                                        reply_markup=markup)
    if len(context.user_data['questions']) == len(context.user_data['game']):
        k = context.user_data["result"]
        if 9 <= k <= 11:
            result = '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n–¢–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –†–æ—â–µ –≤–ø–µ—á–∞—Ç–ª—è—é—Ç! ü•á'
        elif 4 <= k <= 8:
            result = '–£–º–Ω–∏—Ü–∞!\n–¢—ã —è–≤–Ω–æ –±—ã–≤–∞–ª —É –Ω–∞—Å –Ω–∞ —Ç—Ä–∞—Å—Å–µ! ü•à'
        else:
            result = '–ù–µ–ø–ª–æ—Ö–∞—è –ø–æ–ø—ã—Ç–∫–∞!\n–ù–∞–¥–µ—é—Å—å —Ç—ã —É–∑–Ω–∞–ª –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ! ü•â'
        await update.message.reply_text(f'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {context.user_data["result"]}üëç\n'
                                        f'{result}',
                                        reply_markup=ReplyKeyboardRemove())
        context.user_data['questions'] = []
        context.user_data['result'] = 0
        return 0
    return 3


async def competition_dates(update, context):
    con = sqlite3.connect('./bot_data.db')
    cur = con.cursor()
    dates = cur.execute("""SELECT date, competition FROM dates""").fetchall()
    answer = ''
    for d in dates:
        answer += f'{d[0]} - {d[1]}\n'
    await update.message.reply_text(f'{answer}\n–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É,'
                                    f' —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ '
                                    f'—Å–æ–≤–µ—Ç—É—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:'
                                    f' https://vk.com/scbarro, —Å–ø–∞—Å–∏–±–æ ü•∞',
                                    reply_markup=ReplyKeyboardRemove())
    return 0


async def result_sorev(update, context):
    reply_keyboard = [['–ß–õ–ú–î ‚õ∑'], ['–ó–∏–º–Ω–∏–π —Ç—Ä–∏–∞—Ç–ª–æ–Ω ‚õ∑'], ['–ù–æ—á–Ω–∞—è –≥–æ–Ω–∫–∞ ‚õ∑'],
                      ['–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–µ—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
                                    reply_markup=markup)
    return 4


async def print_results(update, context):
    req = update.message.text
    if req == '–ó–∏–º–Ω–∏–π —Ç—Ä–∏–∞—Ç–ª–æ–Ω ‚õ∑':
        with open("results/triathlon.txt", 'r', encoding='utf-8') as file:
            data = [a for a in file.readlines()]
        s = ''
        for a in data:
            s += a
        await update.message.reply_text(s)
    elif req == '–ß–õ–ú–î ‚õ∑':
        with open("results/CHLMD.txt", 'r', encoding='utf-8') as file:
            data = [a for a in file.readlines()]
        s = ''
        for a in data:
            s += a
        await update.message.reply_text(s)
    elif req == '–ù–æ—á–Ω–∞—è –≥–æ–Ω–∫–∞ ‚õ∑':
        with open("results/night.txt", 'r', encoding='utf-8') as file:
            data = [a for a in file.readlines()]
        s = ''
        for a in data:
            s += a
        await update.message.reply_text(s)
    elif req == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
        await update.message.reply_text(f'–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥', reply_markup=ReplyKeyboardRemove())
        return 0


async def sports_training(update, context):
    reply_keyboard = [['–ë–µ–≥ üèÉ', '–õ—ã–∂–∏ ‚õ∑Ô∏è'], ['–ï–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ üö¥', '–ü–ª–∞–≤–∞–Ω—å–µ üèä'],
                      ['–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text('–ö–∞–∫–∏–º –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å?',
                                    reply_markup=markup)
    return 1


async def talking_function(update, context):
    req = update.message.text.strip()
    reply_keyboard = [['–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    context.user_data['questions'] = ['–ö–∞–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ç—ã –ø—Ä–µ–æ–¥–æ–ª–µ–ª –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? –í –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏ '
                                      '—á–∏—Å–ª–æ',
                                      '–ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —É —Ç–µ–±—è –±—ã–ª–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ? –í –æ—Ç–≤–µ—Ç '
                                      '–∑–∞–ø–∏—à–∏ —á–∏—Å–ª–æ',
                                      '–ê –∫–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å? '
                                      '–í –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏ —á–∏—Å–ª–æ',
                                      '–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å —É —Ç–µ–±—è –±—ã–ª –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ? '
                                      '–í –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—à–∏ —á–∏—Å–ª–æ']
    if req == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
        await update.message.reply_text('–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å –¥–æ –∫–æ–Ω—Ü–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–æ –∫–æ–Ω—Ü–∞,'
                                        ' –∏ –±–æ—Ç –¥–∞—Å—Ç –≤–∞–º —Å–æ–≤–µ—Ç –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ üåπ',
                                        reply_markup=ReplyKeyboardRemove())
        return 0
    elif req == '–ë–µ–≥ üèÉ':
        context.user_data['training'] = 'running'
        context.user_data['now_question'] = 'average_heart_rate'
        context.user_data['points'] = 0
        ques = context.user_data['questions'].pop()
        await update.message.reply_text(ques, reply_markup=markup)
        return 5
    elif req == '–õ—ã–∂–∏ ‚õ∑Ô∏è':
        context.user_data['training'] = 'ski'
        context.user_data['now_question'] = 'average_heart_rate'
        context.user_data['points'] = 0
        ques = context.user_data['questions'].pop()
        await update.message.reply_text(ques, reply_markup=markup)
        return 5
    elif req == '–ï–∑–¥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ üö¥':
        context.user_data['training'] = 'bicycle'
        context.user_data['now_question'] = 'average_heart_rate'
        context.user_data['points'] = 0
        ques = context.user_data['questions'].pop()
        await update.message.reply_text(ques, reply_markup=markup)
        return 5
    elif req == '–ü–ª–∞–≤–∞–Ω—å–µ üèä':
        context.user_data['training'] = 'swimming'
        context.user_data['now_question'] = 'average_heart_rate'
        context.user_data['points'] = 0
        ques = context.user_data['questions'].pop()
        await update.message.reply_text(ques, reply_markup=markup)
        return 5
    else:
        await update.message.reply_text('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é...')


async def training(update, context):
    reply_keyboard = [['–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
    req = update.message.text.strip()
    if req == '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
        await update.message.reply_text('–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å –¥–æ –∫–æ–Ω—Ü–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–æ –∫–æ–Ω—Ü–∞,'
                                        ' –∏ –±–æ—Ç –¥–∞—Å—Ç –≤–∞–º —Å–æ–≤–µ—Ç –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ üåπ',
                                        reply_markup=ReplyKeyboardRemove())
        return 0
    quest = context.user_data['now_question']
    now_training = context.user_data['training']
    con = sqlite3.connect('./bot_data.db')
    cur = con.cursor()
    s = f"""SELECT {quest} FROM training WHERE name = '{now_training}'"""
    info = cur.execute(s).fetchall()[0][0].split(', ')
    try:
        x = float(req)
        if context.user_data['now_question'] in ('average_heart_rate', 'maximum_heart_rate') and \
                x > float(info[0].split('-')[-1]):
            await update.message.reply_text(f'–í–∞—É, –≤–∞—à –ø—É–ª—å—Å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π, –∫–∞–∫ –ë—É—Ä–¥–∂-–•–∞–ª–∏—Ñ–∞,'
                                            f' –º–æ–∂–µ—Ç –æ–Ω –±—ã–ª –Ω–∏–∂–µ?',
                                            reply_markup=markup)
            return 5
        if context.user_data['now_question'] == 'distance' and \
                x > float(info[0].split('-')[-1]):
            await update.message.reply_text(f'–Ø —É–≤–µ—Ä–µ–Ω, –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–∏ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏‚Ä¶',
                                            reply_markup=markup)
            context.user_data['points'] += 3
        if context.user_data['now_question'] == 'speed' and \
                x > float(info[0].split('-')[-1]):
            await update.message.reply_text(f'–ë–∞—Ä–∏, —ç—Ç–æ —Ç—ã? –ú–æ–∂–µ—Ç –≤–∞—à–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –±—ã–ª–∞ –Ω–∏–∂–µ?',
                                            reply_markup=markup)
            return 5
        if context.user_data['now_question'] in ('average_heart_rate', 'maximum_heart_rate') and \
                x < 50:
            await update.message.reply_text(f'–°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –ø—É–ª—å—Å',
                                            reply_markup=markup)
            return 5
        point = 3
        for span in info:
            m1, m2 = [float(i) for i in span.split('-')]
            if m1 <= x <= m2:
                context.user_data['points'] += point
                break
            point -= 1
        if len(context.user_data['questions']) == 0:
            point = context.user_data["points"]
            if 8 <= point <= 12:
                ans = '–í—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å! üí™\n' \
                      '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—ã –ª–µ–≥–∫–æ–π —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π ‚úÖ'
            elif 4 <= point <= 8:
                ans = '–í—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü! üí™\n' \
                      '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ –∏ –Ω–µ —Å–Ω–∏–∂–∞–π—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å ‚úÖ'
            else:
                ans = '–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ª—É—á—à–µ!\n' \
                      '–°–æ–≤–µ—Ç—É—é –ø–æ–≤—ã—Å–∏—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å ‚úÖ'
            await update.message.reply_text(f'{ans}',
                                            reply_markup=ReplyKeyboardRemove())
            return 0
        ques = context.user_data['questions'].pop()
        if len(context.user_data['questions']) == 2:
            context.user_data['now_question'] = 'maximum_heart_rate'
        elif len(context.user_data['questions']) == 1:
            context.user_data['now_question'] = 'speed'
        elif len(context.user_data['questions']) == 0:
            context.user_data['now_question'] = 'distance'
        await update.message.reply_text(ques, reply_markup=markup)
    except Exception:
        await update.message.reply_text('–í–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞')


def main():
    TOKEN = '6713892324:AAFjnC6ziUNQdZMLdeTnTPCWMQk1j89rmJ8'
    application = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            0: [MessageHandler(filters.TEXT & ~filters.COMMAND, empty_function)],
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, talking_function)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, answer)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, game)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, print_results)],
            5: [MessageHandler(filters.TEXT & ~filters.COMMAND, training)]
        },
        fallbacks=[CommandHandler("game", game),
                   CommandHandler("sports_training", sports_training),
                   CommandHandler("competition_dates", competition_dates),
                   CommandHandler("result_sorev", result_sorev)])
    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()
